---

- name: Init Kubernetes HA cluster
  when: reset_cluster is succeeded and master_hosts_count | int >= 3
  shell: |
    kubeadm init --control-plane-endpoint {{ control_plane_host }}:{{ haproxy_port }}
                 --pod-network-cidr {{ pod_network_cidr }} \
                 --service-cidr {{ service_cidr }} \
                 --upload-certs \
                 {{ kubeadm_opts }} \
                 {{ init_opts }}

  register: init_cluster
  environment:
    no_proxy: "$no_proxy,.svc,.svc.cluster.local"

- name: Init Kubernetes single master cluster
  when: reset_cluster is succeeded and master_hosts_count | int == 1
  shell: |
    kubeadm init --pod-network-cidr {{ pod_network_cidr }} \
                 --service-cidr {{ service_cidr }} \
                 --upload-certs \                 
                 {{ kubeadm_opts }} \
                 {{ init_opts }}

  register: init_cluster
  environment:
    no_proxy: "$no_proxy,.svc,.svc.cluster.local"    

- name: Create Kubernetes config directory
  file:
    path: ".kube/"
    state: directory

- name: Copy admin.conf to Home directory
  when: init_cluster is succeeded
  copy:
    src: "{{ kubeadmin_config }}"
    dest: ".kube/config"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0755
    remote_src: true

- name: Generate a new certificate key for the master nodes
  shell: kubeadm init phase upload-certs --upload-certs
  register: CERTIFICATE_KEY

- name: Get the join command for the worker nodes
  shell: kubeadm token create --print-join-command
  register: K8S_JOIN_COMMAND

- name: "Add K8S Token and Hash to dummy host"
  add_host:
    name:   "K8S_PARAMS"
    master_certificate_key:  "{{ CERTIFICATE_KEY.stdout_lines|list|last }}"
    join_command:  "{{ K8S_JOIN_COMMAND.stdout }}"
